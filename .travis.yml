language: python
if: branch = master OR tag IS present
sudo: false

cache:
  directories:
    - $PROJ_BASE_DIR
    - $HOME/.cache/pip

env:
  global:
    - PROJ_BASE_DIR=$HOME/proj_install
    - CYTHON_COVERAGE=True
    - PROJSOURCE=7.2.0
    # Doctr deploy key for pyproj4/pyproj
    - secure: "V9hQpdQmIOlk/Wvy0NIntlwSI1OvJ12cTrNPBIvwOy86kyPSk4qFj2YMixvcViM235iiCehN+Ray7FIeeHkPVZe9S+zFgVDxFf/RcgBt7tuhLrOoD1AH6pk9/h+z1owZYAboseLU05wv2+T+am0gCz40kES8As7v6bP+xsw69rw="

matrix:
  include:
    - python: 3.7.9
      env:
        - DOC=true

  allow_failures:
    - python: 3.8.5
      env:
        - PROJSOURCE=git


before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew update
      brew install sqlite3 wget openssl readline libtiff
      # from https://pythonhosted.org/CodeChat/.travis.yml.html
      brew outdated pyenv || brew upgrade pyenv
      # virtualenv doesn't work without pyenv knowledge. venv in Python 3.3
      # doesn't provide Pip by default. So, use `pyenv-virtualenv <https://github.com/yyuu/pyenv-virtualenv/blob/master/README.md>`_.
      brew install pyenv-virtualenv
      pyenv install --list | grep "3.7"
      pyenv install $PYTHON
      # I would expect something like ``pyenv init; pyenv local $PYTHON`` or
      # ``pyenv shell $PYTHON`` would work, but ``pyenv init`` doesn't seem to
      # modify the Bash environment. ??? So, I hand-set the variables instead.
      export PYENV_VERSION=$PYTHON
      export PATH="/Users/travis/.pyenv/shims:${PATH}"
      pyenv-virtualenv venv
      source venv/bin/activate
      # A manual check that the correct version of Python is running.
      python --version
    else
      sudo apt-get install -qq sqlite3 libsqlite3-dev libtiff-dev libcurl4-openssl-dev
    fi
  - echo "PROJSOURCE is $PROJSOURCE"
  # Download external PROJ.4 version and compile if not existing already
  - export PROJ_DIR=$PROJ_BASE_DIR/proj-${PROJSOURCE:0:5}
  - |
    if [ "$PROJSOURCE" = "git" ] || [[ "$PROJSOURCE" != "git" && ! -d "$PROJ_DIR" ]]; then
      ci/proj-compile.sh "$PROJSOURCE"
    fi
  - export PROJ_LIB=$PROJ_DIR/share/proj

install:
  # coverage report requires a local install
  - python -m pip install 'pip>=10.0.1'
  - python -m pip install -e .

script:
  # Building and uploading docs with doctr
  - set -e
  - |
    if [ "$DOC" ]; then
      make install-docs
      make docs-man
      make docs
      pip install doctr
      if [[ -z "$TRAVIS_TAG" ]]; then
        DEPLOY_DIR=latest;
      else
        DEPLOY_DIR="$TRAVIS_TAG";
      fi
      doctr deploy --build-tags --built-docs docs/_build/html $DEPLOY_DIR
    fi

notifications:
  email: false
