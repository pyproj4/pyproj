name: Wheels & sdist

on:
  push:
    branches: [ main ]
  release:
    types: [ created ]
  pull_request:  # also build on PRs touching this file
    paths:
      - ".github/workflows/wheels.yaml"
      - "ci/proj-compile-wheels.sh"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  PROJ_VERSION: "8.2.0"

jobs:
  make_sdist:
    name: Make sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Conda
        uses: s-weigand/setup-conda@v1
        with:
          conda-channels: conda-forge

      - name: Make sdist
        shell: bash
        run: |
          conda config --prepend channels conda-forge
          conda config --set channel_priority strict
          conda create -n sdist_env cython proj=${{ env.PROJ_VERSION }}
          source activate sdist_env
          python setup.py sdist

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ./dist/*.tar.gz
          retention-days: 5

  build_wheels:
    name: Build ${{ matrix.arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-20.04
          arch: x86_64
        - os: ubuntu-20.04
          arch: i686
        - os: macos-10.15
          arch: x86_64
          cmake_osx_architectures: x86_64
        # - os: macos-10.15
        #   arch: arm64
        #   cmake_osx_architectures: arm64
        # - os: macos-10.15
        #   arch: universal2
        #   cmake_osx_architectures: "x86_64;arm64"
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.3.1
        env:
          CIBW_SKIP: "*musllinux*"
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_ENVIRONMENT_LINUX:
            PROJ_WHEEL=true
            PROJ_VERSION=${{ env.PROJ_VERSION }}
            PROJ_DIR=/project/pyproj/proj_dir
          CIBW_ENVIRONMENT_MACOS:
            PROJ_WHEEL=true
            PROJ_VERSION=${{ env.PROJ_VERSION }}
            PROJ_DIR=${GITHUB_WORKSPACE}/pyproj/proj_dir
            MACOSX_DEPLOYMENT_TARGET=10.9
            CMAKE_OSX_ARCHITECTURES='${{ matrix.cmake_osx_architectures }}'
            LDFLAGS="${LDFLAGS} -Wl,-rpath,${GITHUB_WORKSPACE}/pyproj/proj_dir/lib"
          CIBW_BEFORE_ALL: bash ./ci/proj-compile-wheels.sh
          CIBW_TEST_REQUIRES: cython pytest oldest-supported-numpy pandas xarray
          CIBW_BEFORE_TEST: python -m pip install shapely~=1.7.1 || echo "Shapely install failed"
          CIBW_TEST_COMMAND: >
            pyproj -v &&
            python -c "import pyproj; pyproj.Proj(init='epsg:4269')"  &&
            cp -r {package}/test . &&
            PROJ_NETWORK=ON python -m pytest test -v -s

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl
          retention-days: 5

  publish:
    name: Publish on PyPI
    needs: [make_sdist,build_wheels]
    runs-on: ubuntu-latest
    # release on every tag
    if: github.event_name == 'release' && startsWith(github.event.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: Upload Wheels to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
          # repository_url: https://test.pypi.org/legacy/  # To test
